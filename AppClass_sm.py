# ex: set ro:
# DO NOT EDIT.
# generated by smc (http://smc.sourceforge.net/)
# from file : AppClass.sm

import statemap


class AppClassState(statemap.State):

    def Entry(self, fsm):
        pass

    def Exit(self, fsm):
        pass

    def Com(self, fsm):
        self.Default(fsm)

    def D(self, fsm):
        self.Default(fsm)

    def EOS(self, fsm):
        self.Default(fsm)

    def Eq(self, fsm):
        self.Default(fsm)

    def L(self, fsm):
        self.Default(fsm)

    def LBr(self, fsm):
        self.Default(fsm)

    def RBr(self, fsm):
        self.Default(fsm)

    def Sem(self, fsm):
        self.Default(fsm)

    def Sp(self, fsm):
        self.Default(fsm)

    def Unknown(self, fsm):
        self.Default(fsm)

    def Default(self, fsm):
        msg = "\n\tState: %s\n\tTransition: %s" % (
            fsm.getState().getName(), fsm.getTransition())
        raise statemap.TransitionUndefinedException(msg)

class Map1_Default(AppClassState):

    def Unknown(self, fsm):
        fsm.getState().Exit(fsm)
        fsm.setState(Map1.Error)
        fsm.getState().Entry(fsm)


    def D(self, fsm):
        fsm.getState().Exit(fsm)
        fsm.setState(Map1.Error)
        fsm.getState().Entry(fsm)


    def L(self, fsm):
        fsm.getState().Exit(fsm)
        fsm.setState(Map1.Error)
        fsm.getState().Entry(fsm)


    def Sp(self, fsm):
        fsm.getState().Exit(fsm)
        fsm.setState(Map1.Error)
        fsm.getState().Entry(fsm)


    def LBr(self, fsm):
        fsm.getState().Exit(fsm)
        fsm.setState(Map1.Error)
        fsm.getState().Entry(fsm)


    def RBr(self, fsm):
        fsm.getState().Exit(fsm)
        fsm.setState(Map1.Error)
        fsm.getState().Entry(fsm)


    def Com(self, fsm):
        fsm.getState().Exit(fsm)
        fsm.setState(Map1.Error)
        fsm.getState().Entry(fsm)


    def Sem(self, fsm):
        fsm.getState().Exit(fsm)
        fsm.setState(Map1.Error)
        fsm.getState().Entry(fsm)


    def Eq(self, fsm):
        fsm.getState().Exit(fsm)
        fsm.setState(Map1.Error)
        fsm.getState().Entry(fsm)


class Map1_Start(Map1_Default):

    def L(self, fsm):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.setk()
        finally:
            fsm.setState(Map1.Name1)
            fsm.getState().Entry(fsm)


class Map1_Name1(Map1_Default):

    def D(self, fsm):
        ctxt = fsm.getOwner()
        if ctxt.getk()<20 :
            endState = fsm.getState()
            fsm.clearState()
            try:
                ctxt.addk()
            finally:
                fsm.setState(endState)
        else:
            Map1_Default.D(self, fsm)
        
    def Eq(self, fsm):
        fsm.getState().Exit(fsm)
        fsm.setState(Map1.SName2)
        fsm.getState().Entry(fsm)


    def L(self, fsm):
        ctxt = fsm.getOwner()
        if ctxt.getk()<20 :
            endState = fsm.getState()
            fsm.clearState()
            try:
                ctxt.addk()
            finally:
                fsm.setState(endState)
        else:
            Map1_Default.L(self, fsm)
        
    def Sp(self, fsm):
        fsm.getState().Exit(fsm)
        fsm.setState(Map1.Equal)
        fsm.getState().Entry(fsm)


class Map1_Equal(Map1_Default):

    def Eq(self, fsm):
        fsm.getState().Exit(fsm)
        fsm.setState(Map1.SName2)
        fsm.getState().Entry(fsm)


    def Sp(self, fsm):()


class Map1_SName2(Map1_Default):

    def L(self, fsm):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.setk()
        finally:
            fsm.setState(Map1.Name2)
            fsm.getState().Entry(fsm)


    def Sp(self, fsm):()


class Map1_Name2(Map1_Default):

    def D(self, fsm):
        ctxt = fsm.getOwner()
        if ctxt.getk()<20 :
            endState = fsm.getState()
            fsm.clearState()
            try:
                ctxt.addk()
            finally:
                fsm.setState(endState)
        else:
            Map1_Default.D(self, fsm)
        
    def L(self, fsm):
        ctxt = fsm.getOwner()
        if ctxt.getk()<20 :
            endState = fsm.getState()
            fsm.clearState()
            try:
                ctxt.addk()
            finally:
                fsm.setState(endState)
        else:
            Map1_Default.L(self, fsm)
        
    def LBr(self, fsm):
        fsm.getState().Exit(fsm)
        fsm.setState(Map1.SName3)
        fsm.getState().Entry(fsm)


    def Sp(self, fsm):
        fsm.getState().Exit(fsm)
        fsm.setState(Map1.LBracket)
        fsm.getState().Entry(fsm)


class Map1_LBracket(Map1_Default):

    def LBr(self, fsm):
        fsm.getState().Exit(fsm)
        fsm.setState(Map1.SName3)
        fsm.getState().Entry(fsm)


    def Sp(self, fsm):()


class Map1_SName3(Map1_Default):

    def D(self, fsm):
        fsm.getState().Exit(fsm)
        fsm.setState(Map1.Digit)
        fsm.getState().Entry(fsm)


    def L(self, fsm):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.setk()
        finally:
            fsm.setState(Map1.Name3)
            fsm.getState().Entry(fsm)


    def RBr(self, fsm):
        fsm.getState().Exit(fsm)
        fsm.setState(Map1.Semicolon)
        fsm.getState().Entry(fsm)


    def Sp(self, fsm):()


class Map1_Name3(Map1_Default):

    def Com(self, fsm):
        fsm.getState().Exit(fsm)
        fsm.setState(Map1.SName3Com)
        fsm.getState().Entry(fsm)


    def D(self, fsm):
        ctxt = fsm.getOwner()
        if ctxt.getk()<20 :
            endState = fsm.getState()
            fsm.clearState()
            try:
                ctxt.addk()
            finally:
                fsm.setState(endState)
        else:
            Map1_Default.D(self, fsm)
        
    def L(self, fsm):
        ctxt = fsm.getOwner()
        if ctxt.getk()<20 :
            endState = fsm.getState()
            fsm.clearState()
            try:
                ctxt.addk()
            finally:
                fsm.setState(endState)
        else:
            Map1_Default.L(self, fsm)
        
    def RBr(self, fsm):
        fsm.getState().Exit(fsm)
        fsm.setState(Map1.Semicolon)
        fsm.getState().Entry(fsm)


    def Sp(self, fsm):
        fsm.getState().Exit(fsm)
        fsm.setState(Map1.Comma)
        fsm.getState().Entry(fsm)


class Map1_Digit(Map1_Default):

    def Com(self, fsm):
        fsm.getState().Exit(fsm)
        fsm.setState(Map1.SName3Com)
        fsm.getState().Entry(fsm)


    def D(self, fsm):()


    def RBr(self, fsm):
        fsm.getState().Exit(fsm)
        fsm.setState(Map1.Semicolon)
        fsm.getState().Entry(fsm)


    def Sp(self, fsm):
        fsm.getState().Exit(fsm)
        fsm.setState(Map1.Comma)
        fsm.getState().Entry(fsm)


class Map1_Comma(Map1_Default):

    def Com(self, fsm):
        fsm.getState().Exit(fsm)
        fsm.setState(Map1.SName3Com)
        fsm.getState().Entry(fsm)


    def RBr(self, fsm):
        fsm.getState().Exit(fsm)
        fsm.setState(Map1.Semicolon)
        fsm.getState().Entry(fsm)


    def Sp(self, fsm):()


class Map1_SName3Com(Map1_Default):

    def D(self, fsm):
        fsm.getState().Exit(fsm)
        fsm.setState(Map1.Digit)
        fsm.getState().Entry(fsm)


    def L(self, fsm):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.setk()
        finally:
            fsm.setState(Map1.Name3)
            fsm.getState().Entry(fsm)


    def Sp(self, fsm):()


class Map1_Semicolon(Map1_Default):

    def Sem(self, fsm):
        fsm.getState().Exit(fsm)
        fsm.setState(Map1.End)
        fsm.getState().Entry(fsm)


    def Sp(self, fsm):()


class Map1_End(Map1_Default):

    def EOS(self, fsm):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.Acceptable()
        finally:
            fsm.setState(Map1.OK)
            fsm.getState().Entry(fsm)


    def Sp(self, fsm):()


class Map1_OK(Map1_Default):
    pass

class Map1_Error(Map1_Default):

    def Com(self, fsm):()


    def D(self, fsm):()


    def EOS(self, fsm):
        ctxt = fsm.getOwner()
        endState = fsm.getState()
        fsm.clearState()
        try:
            ctxt.Unacceptable()
        finally:
            fsm.setState(endState)


    def Eq(self, fsm):()


    def L(self, fsm):()


    def LBr(self, fsm):()


    def RBr(self, fsm):()


    def Sem(self, fsm):()


    def Sp(self, fsm):()


    def Unknown(self, fsm):()


class Map1(object):

    Start = Map1_Start('Map1.Start', 0)
    Name1 = Map1_Name1('Map1.Name1', 1)
    Equal = Map1_Equal('Map1.Equal', 2)
    SName2 = Map1_SName2('Map1.SName2', 3)
    Name2 = Map1_Name2('Map1.Name2', 4)
    LBracket = Map1_LBracket('Map1.LBracket', 5)
    SName3 = Map1_SName3('Map1.SName3', 6)
    Name3 = Map1_Name3('Map1.Name3', 7)
    Digit = Map1_Digit('Map1.Digit', 8)
    Comma = Map1_Comma('Map1.Comma', 9)
    SName3Com = Map1_SName3Com('Map1.SName3Com', 10)
    Semicolon = Map1_Semicolon('Map1.Semicolon', 11)
    End = Map1_End('Map1.End', 12)
    OK = Map1_OK('Map1.OK', 13)
    Error = Map1_Error('Map1.Error', 14)
    Default = Map1_Default('Map1.Default', -1)

class AppClass_sm(statemap.FSMContext):

    def __init__(self, owner):
        statemap.FSMContext.__init__(self, Map1.Start)
        self._owner = owner

    def __getattr__(self, attrib):
        def trans_sm(*arglist):
            self._transition = attrib
            getattr(self.getState(), attrib)(self, *arglist)
            self._transition = None
        return trans_sm

    def enterStartState(self):
        self._state.Entry(self)

    def getOwner(self):
        return self._owner

# Local variables:
#  buffer-read-only: t
# End:
